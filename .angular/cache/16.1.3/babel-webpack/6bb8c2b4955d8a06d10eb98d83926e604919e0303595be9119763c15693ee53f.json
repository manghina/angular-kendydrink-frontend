{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { User } from '../models/user.model';\nimport { URL_API } from '../shared/constant';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.isLoggedIn = false;\n      this.isAdmin = false;\n      this.isInfluencer = false;\n      // Crei un nuovo Subject di tipo boolean\n      this.isLogged = new Subject();\n      // Lo 'converti' in Observable, perchè questa variabile può variare nel tempo e ci si potrà fare la subscribe\n      this.isLogged$ = this.isLogged.asObservable();\n      this.apiLogInEmail = `${URL_API}user/login/email`;\n      this.apiLogInGoogle = `${URL_API}user/login/google`;\n    }\n    // Questo metodo setta il valore della variabile, in base a cosa ci si passa nella firma (true o false)\n    setIsLogged(value) {\n      const todayDate = new Date();\n      this.isLogged.next(value);\n      localStorage.setItem('isLogged', 'true');\n      if (this.expirationTokenDate != undefined) {\n        this.isExpired = todayDate.getTime() > this.expirationTokenDate.getTime();\n        if (this.isExpired) {\n          this.isLogged.next(false);\n        } else this.isLogged.next(value);\n      }\n    }\n    ngOnInit() {}\n    isAuthenticated() {\n      return !!localStorage.getItem('isLogged');\n    }\n    isRoleAdmin() {\n      return this.isAdmin;\n    }\n    createUser(expiration, type, user_id, value) {\n      this.user = new User(expiration, type, user_id, value);\n      this.isLoggedIn = true;\n    }\n    LogInEmail(body) {\n      this.setIsLogged(true);\n      return this.http.post(this.apiLogInEmail, {});\n    }\n    LogInGoogle(body) {\n      this.setIsLogged(true);\n      return this.http.post(this.apiLogInGoogle, {});\n    }\n    Register(email, password) {\n      return this.http.post(URL_API + 'register', {});\n    }\n    LogOut() {\n      this.user = null;\n      this.router.navigate(['/login']);\n      this.isLoggedIn = false;\n      this.ClearStorage();\n    }\n    ClearStorage() {\n      localStorage.clear();\n      this.setIsLogged(false);\n    }\n    GetToken() {\n      // Se trova il token nel local o nel session storage, significa che l'utente è ancora loggato, quindi setta la variabile\n      // isLogged a true \n      if (localStorage.getItem(\"auth_token\") || sessionStorage.getItem(\"auth_token\")) {\n        this.setIsLogged(true);\n        if (!localStorage.getItem(\"expiration\")) {\n          const expirationDate = new Date();\n          expirationDate.setHours(expirationDate.getHours() + 24);\n          this.expirationTokenDate = expirationDate;\n          localStorage.setItem(\"expiration\", expirationDate.toString());\n        }\n        return localStorage.getItem(\"auth_token\") || sessionStorage.getItem(\"auth_token\");\n      } else {\n        // se non trova il token, setta la variabile a false, perchè se il token non c'è significa che non è loggato\n        this.setIsLogged(false);\n        return '';\n      }\n    }\n    // Estrae l'ID dell'utente dal token, separando la stringa dove trova i due punti e prendendo la prima parte (quella dell'id)\n    GetId() {\n      return this.GetToken()?.split(':')[0] || '';\n    }\n  }\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}