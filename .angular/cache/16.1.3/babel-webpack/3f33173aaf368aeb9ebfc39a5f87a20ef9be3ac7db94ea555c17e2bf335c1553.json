{"ast":null,"code":"import { catchError, throwError } from \"rxjs\";\nimport { AuthService } from \"./auth.service\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport let AuthInterceptor = /*#__PURE__*/(() => {\n  class AuthInterceptor {\n    constructor(injector, router) {\n      this.injector = injector;\n      this.router = router;\n    }\n    intercept(request, next) {\n      let authservice = this.injector.get(AuthService);\n      let jwtToken;\n      if (authservice.GetToken()) {\n        // Se trova il token nel local storage\n        jwtToken = request.clone({\n          headers: request.headers.set(\"Authorization\", \"Bearer \" + authservice.GetToken())\n        });\n      } else jwtToken = request.clone(); // Altrimenti, se non lo trova, clona la richiesta senza inserire nulla\n      return next.handle(jwtToken).pipe(catchError(error => {\n        if (error.status === 500) {\n          // qui puoi gestire la logica per il caso di login fallito\n          // ad esempio, puoi navigare l'utente alla pagina di login\n          this.router.navigate([\"/login\"]);\n        } else if (error.status === 400) {\n          /* alert(error.error); */\n        }\n        return throwError(error.error);\n      }));\n    }\n  }\n  AuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n    return new (t || AuthInterceptor)(i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i1.Router));\n  };\n  AuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptor,\n    factory: AuthInterceptor.ɵfac\n  });\n  return AuthInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}