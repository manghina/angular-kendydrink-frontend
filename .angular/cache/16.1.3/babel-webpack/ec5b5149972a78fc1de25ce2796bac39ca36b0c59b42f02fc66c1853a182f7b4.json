{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"@angular/router\";\nexport let ProfileGuard = /*#__PURE__*/(() => {\n  class ProfileGuard {\n    constructor(authService, router) {\n      this.authService = authService;\n      this.router = router;\n    }\n    canActivate(route, state) {\n      console.log(\"can Active /profile: isExpired: \");\n      console.log(this.authService.isExpired);\n      // Se trova il token nello storage\n      if (this.authService.GetToken()) {\n        const expirationTokenDate = new Date(localStorage.getItem(\"expiration\")); // Prende la data di scadenza\n        const isExpired = new Date() > expirationTokenDate; // E la compara con la data del momento stesso, per vedere se è scaduto\n        if (isExpired) {\n          // Se il token è scaduto\n          this.authService.setIsLogged(false); // Aggiorna la variabile IsLogged nell'authservice su false\n          this.authService.ClearStorage(); // e pulisce il local storage, cancellando token e expiration\n        } else {\n          this.authService.setIsLogged(true); // altrimenti, se non è scaduto, aggiorna la variabile IsLogged nell'authservice su true\n        }\n      } else {\n        // Se invece non trova il token nello storage, \n        this.authService.setIsLogged(false); // aggiorna la variabile IsLogged nell'authservice su false\n        this.authService.ClearStorage(); // e pulisce il local storage cancellando token e expiration\n      }\n\n      if (!this.authService.isExpired) {\n        return true;\n      } else {\n        this.authService.LogOut();\n        this.router.navigate(['/shop']);\n        return false;\n      }\n    }\n  }\n  ProfileGuard.ɵfac = function ProfileGuard_Factory(t) {\n    return new (t || ProfileGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n  ProfileGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProfileGuard,\n    factory: ProfileGuard.ɵfac,\n    providedIn: 'root'\n  });\n  return ProfileGuard;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}